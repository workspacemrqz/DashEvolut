Objetivo:
Limpar o repositório removendo arquivos de anotações (.md e .txt), artefatos/relatórios de teste e scripts de migração ou teste obsoletos — sem quebrar frontend nem backend.

Modo de operação (segurança primeiro):
1) Não remova nada ainda. Faça um DRY-RUN listando candidatos por categoria.
2) Solicite minha confirmação por categoria antes de gerar os comandos de remoção.
3) Após confirmação, gere comandos usando git rm (com paths relativos) e uma mensagem de commit.

Não remover (essenciais):
- README.md, LICENSE, CHANGELOG*, SECURITY*, CONTRIBUTING*
- Código-fonte e app: src/, app/, backend/, frontend/, server/, client/, components/, pages/
- Configs e locks: package.json, pnpm-lock.yaml/yarn.lock/package-lock.json, tsconfig.json, babel*, vite*, next*, nuxt*, tailwind*, eslint*, prettier*, docker*, docker-compose*, Procfile
- Ambientes: .env, .env.example, .env.* (não excluir)
- Banco/ORM críticos: migrations necessárias em produção, seeds essenciais, schema.prisma, ormconfig*, knexfile*, alembic.ini, flyway*, liquibase*
- Public/assets necessários: public/, static/, assets/

Candidatos a remoção (propor, não executar sem confirmação):
- Anotações: *.md e *.txt que não sejam os essenciais acima, especialmente em: docs/, doc/, notes/, anotacoes/, drafts/, rascunho/, tmp/
- Artefatos/relatórios de teste: coverage/, .nyc_output/, junit*.xml, reports/, test-results/, html-report/, .pytest_cache/, .pytest_cache/, .tox/, .venv-test/
- Testes e utilitários de teste obsoletos (confirmar): __tests__/, tests/, *.{spec,test}.*, mocks/, fixtures/, snapshots/
- Migrações antigas já aplicadas em todos os ambientes (confirmar fortemente): pastas migrations/* com carimbo antigo; dumps temporários (*.sql, *.dump) em tmp/backups/
- Arquivos temporários e rascunhos: *.{tmp,old,bak,log}, *-copy.*, *-backup.*, *~; nomes contendo wip, draft, rascunho, anotacao

Heurísticas para marcar como “obsoleto” (exigir confirmação):
- Arquivos com >90 dias sem modificação e fora de rotas de build/runtime
- Testes desativados (describe.skip/it.skip, @Disabled) ou comentados integralmente
- Migrações com número inferior ao baseline atual do banco e já aplicadas em produção/staging

Saída esperada:
1) Relatório de DRY-RUN com:
   - Categorias, padrões usados e total de arquivos por categoria
   - 10 exemplos de paths por categoria (restante como contagem)
2) Perguntas de confirmação por categoria (S/N) e observações de risco
3) Após confirmação:
   - Lista completa dos caminhos aprovados
   - Comandos: 
     - Bash: git rm -r -- <paths...>
     - PowerShell: git rm -r -- <paths...>
   - Mensagem de commit sugerida: "chore(cleanup): remove notas, artefatos de teste e temporários sem impacto em build"
   - Passos de verificação: comandos para build do frontend e backend (ex.: npm run build / docker build / compile)

Critérios de sucesso:
- Builds do frontend e backend continuam passando após a remoção
- Aplicação inicia normalmente nos ambientes-alvo
- Nenhuma dependência de runtime foi deletada